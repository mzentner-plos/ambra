<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2006-2013 by Public Library of Science

  http://plos.org
  http://ambraproject.org

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

  <!-- Set up XML factories -->
  <bean id="documentBuilderFactory" class="org.ambraproject.util.DocumentBuilderFactoryCreator"
        factory-method="createFactory"/>

  <!--Ambra developer beans here -->
  <bean id="configurationStore" class="org.ambraproject.configuration.ConfigurationStore"
        factory-method="getInstance"/>
  <bean id="ambraConfiguration" factory-bean="configurationStore" factory-method="getConfiguration"/>

  <bean id="fetchArticleService" class="org.ambraproject.service.article.FetchArticleServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory" />
    <property name="articleTransformService" ref="articleTransformService" />
    <property name="fileStoreService" ref="fileStoreService" />
    <property name="articleHtmlCache" ref="articleHtmlCache" />
    <property name="pubGetLookupService" ref="pubGetLookupService"/>
    <property name="guestCrossRefUrl" value="${ambra.services.crossref.guestquery.url}"/>
  </bean>

  <bean id="articleAssetService" class="org.ambraproject.service.article.ArticleAssetServiceImpl">
    <property name="permissionsService" ref="permissionsService" />
    <property name="articleService" ref="articleService" />
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="smallImageRep" value="PNG_S"/>
    <property name="mediumImageRep" value="PNG_M"/>
    <property name="largeImageRep" value="PNG_L"/>
    <property name="templatesDirectory" value="${ambra.virtualJournals.templateDir}"/>
    <property name="fileStoreService" ref="fileStoreService"/>
  </bean>

  <bean id="trackBackService" class="org.ambraproject.service.trackback.TrackbackServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="configuration" ref="ambraConfiguration"/>
  </bean>

  <bean id="pingbackService" class="org.ambraproject.service.trackback.PingbackServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="configuration" ref="ambraConfiguration"/>
  </bean>

  <!-- Defined in webapp/src/main/resources/ambra/configuration/defaults.xml -->
  <util:map id="xslArticleTransformStyleSheetMap">
    <entry key="default"
           value="${ambra.services.articletransform.default}"/>
    <entry key="3.0"
           value="${ambra.services.articletransform.dtd_3_0}"/>
  </util:map>

  <bean id="articleTransformService" class="org.ambraproject.service.xml.XMLServiceImpl" init-method="init">
    <property name="articleRep" value="XML"/>
    <property name="xslDefaultTemplate" value="${ambra.services.articletransform.default}"/>
    <property name="xslTemplateMap" ref="xslArticleTransformStyleSheetMap"/>
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
    <property name="xmlFactoryProperty" ref="xmlFactoryProperties"/>
  </bean>

  <!-- Defined in webapp/src/main/resources/ambra/configuration/defaults.xml -->
  <util:map id="xslFullDoiStyleSheetMap">
    <entry key="default"
           value="${ambra.services.fulldoitransform.default}"/>
    <entry key="3.0"
           value="${ambra.services.fulldoitransform.dtd_3_0}"/>
  </util:map>

  <bean id="xmlService" class="org.ambraproject.service.xml.XMLServiceImpl" init-method="init">
    <property name="articleRep" value="XML"/>
    <property name="xslDefaultTemplate" value="${ambra.services.fulldoitransform.default}"/>
    <property name="xslTemplateMap" ref="xslFullDoiStyleSheetMap"/>
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
    <property name="xmlFactoryProperty" ref="xmlFactoryProperties"/>
  </bean>

  <!-- Defined in webapp/src/main/resources/ambra/configuration/defaults.xml -->
  <util:map id="xslObjInfoStyleSheetMap">
    <entry key="default"
           value="${ambra.services.objinfotransform.default}"/>
    <entry key="3.0"
           value="${ambra.services.objinfotransform.dtd_3_0}"/>
  </util:map>

  <bean id="secondaryObjectService" class="org.ambraproject.service.xml.XMLServiceImpl" init-method="init">
    <property name="articleRep" value="XML"/>
    <property name="xslDefaultTemplate" value="${ambra.services.objinfotransform.default}"/>
    <property name="xslTemplateMap" ref="xslObjInfoStyleSheetMap"/>
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
    <property name="xmlFactoryProperty" ref="xmlFactoryProperties"/>
  </bean>

  <util:map id="xmlFactoryProperties">
    <entry key="javax.xml.transform.TransformerFactory"
           value="net.sf.saxon.TransformerFactoryImpl"/>
    <entry key="javax.xml.transform.Transformer"
           value="net.sf.saxon.Controller"/>
  </util:map>

  <bean id="articleService" class="org.ambraproject.service.article.ArticleServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="permissionsService" ref="permissionsService"/>
    <property name="crossRefLookupService" ref="crossRefLookupService"/>
  </bean>

  <bean id="feedService" class="org.ambraproject.service.feed.FeedServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="annotationService" ref="annotationService"/>
    <property name="journalService" ref="journalService"/>
    <property name="solrHttpService" ref="solrHttpService"/>
    <property name="browseService" ref="browseService"/>
    <property name="configuration" ref="ambraConfiguration" />
    <property name="solrFieldConverter" ref="solrFieldConverter" />
    <property name="trackBackService" ref="trackBackService"/>
  </bean>

  <!--TODO: Neither DocumentBuilder nor DocumentBuilderFactory are thread safe ... find a solution, possibly using ThreadLocals-->
  <bean id="documentBuilder" class="javax.xml.parsers.DocumentBuilder" factory-bean="documentBuilderFactory"
        factory-method="newDocumentBuilder"/>

  <bean id="httpConnectionManagerParams" class="org.apache.commons.httpclient.params.HttpConnectionManagerParams">
    <!-- time out after 30 sec -->
    <property name="soTimeout" value="30000"/>
    <property name="connectionTimeout" value="30000"/>
  </bean>

  <bean id="multiThreadedHttpConnectionManager"
        class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager">
    <property name="params" ref="httpConnectionManagerParams"/>
  </bean>

  <bean id="httpClient" class="org.apache.commons.httpclient.HttpClient">
    <constructor-arg index="0" ref="multiThreadedHttpConnectionManager"/>
  </bean>

  <bean id="crossRefLookupService" class="org.ambraproject.service.crossref.CrossRefLookupServiceImpl">
    <property name="httpClient" ref="httpClient"/>
    <property name="crossRefUrl" value="${ambra.services.crossref.query.url}"/>
  </bean>

  <bean id="pubGetLookupService" class="org.ambraproject.service.pubget.PubGetLookupServiceImpl">
    <property name="httpClient" ref="httpClient"/>
    <property name="pubGetUrl" value="${ambra.services.pubget.url}"/>
  </bean>

  <!-- Warning. Spring does not autowire 'simple' properties like primitives, Strings and Classes -->
  <bean id="defaultEncodingCharset" class="java.lang.String">
    <constructor-arg value="UTF-8"/>
  </bean>

  <bean id="applicationId" class="java.lang.String">
    <constructor-arg value="topaz-ambra"/>
  </bean>

  <bean id="permissionsService" class="org.ambraproject.service.permission.PermissionsServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="rolesCache" ref="rolesCache"/>
  </bean>

  <bean id="annotationService" class="org.ambraproject.service.annotation.AnnotationServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <bean id="userService" class="org.ambraproject.service.user.UserServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="configuration" ref="ambraConfiguration"/>
    <property name="permissionsService" ref="permissionsService"/>
  </bean>

  <bean id="captchaService" class="org.ambraproject.service.captcha.CaptchaServiceImpl">
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
  </bean>

  <bean id="profanityCheckingService" class="org.ambraproject.util.ProfanityCheckingServiceImpl">
    <property name="profaneWords" ref="profaneWords"/>
  </bean>

  <bean id="browseService" class="org.ambraproject.service.article.BrowseServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="configuration" ref="ambraConfiguration"/>
    <property name="journalService" ref="journalService"/>
    <property name="browseSolrCache" ref="browseSolrCache"/>
    <property name="serverFactory" ref="solrServerFactory"/>
    <property name="articleService" ref="articleService" />
  </bean>

  <!-- Add all your constants to the map with a key and a value/ref -->
  <util:map id="otherConstants" map-class="java.util.HashMap">
    <entry key="countries" value-ref="countries"/>
  </util:map>

  <bean id="solrServerFactory" class="org.ambraproject.service.search.SolrServerFactory">
    <constructor-arg ref="ambraConfiguration"/>
  </bean>

  <bean id="searchService" class="org.ambraproject.service.search.SolrSearchService">
    <property name="configuration" ref="ambraConfiguration"/>
    <property name="serverFactory" ref="solrServerFactory"/>
    <property name="cache" ref="solrCache" />
  </bean>

  <bean id="journalCreator" class="org.ambraproject.service.journal.JournalCreatorImpl"
        init-method="createJournals" depends-on="bootstrapMigrator">
    <property name="configuration" ref="ambraConfiguration"/>
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <bean id="journalService" class="org.ambraproject.service.journal.JournalServiceImpl"
        depends-on="journalCreator">
    <property name="configuration" ref="ambraConfiguration"/>
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <bean id="bootstrapMigrator" class="org.ambraproject.service.migration.BootstrapMigratorServiceImpl"
        init-method="migrate">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <!-- hibernate settings -->
  <bean id="hibernateDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:comp/env/jdbc/AmbraDS"/>
  </bean>

  <bean id="fileStoreService" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:comp/env/ambra/FileStore"/>
  </bean>

  <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <!--Transactions managed by spring-->
  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

  <bean id="hibernateSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <property name="dataSource" ref="hibernateDataSource"/>
    <!--property name="useTransactionAwareDataSource" value="true"/>
    <property name="configurationClass" value="org.hibernate.cfg.AnnotationConfiguration" /-->
    <property name="mappingLocations">
      <list>
        <value>classpath:org/ambraproject/models/*.hbm.xml</value>
      </list>
    </property>
    <property name="hibernateProperties">
      <props>
        <!-- We might use MySQLInnoDBDialect instead -->
        <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
        <!--<prop key="hibernate.show_sql">true</prop>-->
        <!--<prop key="hibernate.format_sql">true</prop>-->
      </props>
    </property>
  </bean>

  <!-- end hibernate settings -->

  <bean id="browseSolrCache" class="org.ambraproject.service.cache.EhcacheProvider">
    <constructor-arg index="0" ref="browseSolrEhcache"/>
    <constructor-arg index="1" value="false"/>
  </bean>

  <bean id="articleHtmlCache" class="org.ambraproject.service.cache.EhcacheProvider">
    <constructor-arg index="0" ref="articleHtmlEhcache"/>
  </bean>

  <bean id="rolesCache" class="org.ambraproject.service.cache.EhcacheProvider">
    <constructor-arg index="0" ref="rolesEhCache"/>
  </bean>

  <bean id="taxonomyCache" class="org.ambraproject.service.cache.EhcacheProvider">
    <constructor-arg index="0" ref="taxonomyEhCache"/>
  </bean>

  <bean id="solrCache" class="org.ambraproject.service.cache.EhcacheProvider">
    <constructor-arg index="0" ref="solrEhCache"/>
  </bean>

  <!-- freemarker configs -->
  <bean id="ambraFreemarkerConfig" class="org.ambraproject.freemarker.AmbraFreemarkerConfig">
    <constructor-arg index="0" ref="ambraConfiguration"/>
  </bean>

  <bean id="ambraFreemarkerManager" class="org.ambraproject.freemarker.AmbraFreemarkerManager">
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
    <property name="ambraFreemarkerConfig" ref="ambraFreemarkerConfig"/>
  </bean>

  <!-- Caches -->
  <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
    <property name="configLocation" value="file://${ambra.services.ehcache.configFileLocation}"/>
    <property name="shared" value="true"/>
  </bean>

  <bean id="browseSolrEhcache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <property name="cacheName" value="BrowseSolrCache"/>
  </bean>

  <bean id="articleHtmlEhcache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <property name="cacheName" value="ArticleHtmlCache"/>
  </bean>

  <bean id="rolesEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <property name="cacheName" value="RolesCache"/>
  </bean>

  <bean id="taxonomyEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <property name="cacheName" value="TaxonomyCache"/>
  </bean>

  <bean id="solrEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <property name="cacheName" value="SOLRCache"/>
  </bean>

  <!-- JMX exporting -->
  <bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
    <property name="locateExistingServerIfPossible" value="true"/>
  </bean>

  <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="staticMethod"
              value="net.sf.ehcache.management.ManagementService.registerMBeans"/>
    <property name="arguments">
      <list>
        <ref bean="cacheManager"/>
        <ref bean="mbeanServer"/>
        <value>true</value>
        <value>true</value>
        <value>true</value>
        <value>true</value>
      </list>
    </property>
  </bean>

  <bean class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
    <property name="autodetect" value="true"/>
  </bean>

  <bean name="org.ambraproject.logging:name=log4j" class="org.apache.log4j.jmx.HierarchyDynamicMBean"/>

  <!-- email configuration -->
  <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <property name="host" value="${ambra.network.hosts.mailhost}"/>
  </bean>

  <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
    <property name="templateLoaderPath" value="/WEB-INF/emailTemplates/"/>
    <property name="defaultEncoding" ref="defaultEncodingCharset"/>
  </bean>

  <!--For Dev setup, you can uncomment the dummy mailer and comment out the real mailer-->
  <!--<bean id="ambraMailer" class="org.ambraproject.testutils.DummyAmbraMailer" />-->

  <bean id="ambraMailer" class="org.ambraproject.service.mailer.AmbraMailerImpl">
    <property name="fromEmailAddress" value="application@plosone.org"/>
    <property name="freemarkerConfig" ref="freemarkerConfig"/>
    <property name="mailSender" ref="mailSender"/>
    <property name="feedbackEmailMap">
      <map>
        <entry key="text" value="feedback-text.ftl"/>
        <entry key="html" value="feedback-html.ftl"/>
        <entry key="subject" value="My feedback for PLoS ONE"/>
        <entry key="toEmailAddress" value="${ambra.platform.email.feedback}"/>
      </map>
    </property>
    <property name="emailThisArticleMap">
      <map>
        <entry key="text" value="emailThisArticle-text.ftl"/>
        <entry key="html" value="emailThisArticle-html.ftl"/>
        <entry key="url" value="${ambra.services.crossref.plos.doiurl}"/>
        <entry key="subject" value="An Article from "/>
      </map>
    </property>
    <property name="autoIngestEmailMap">
      <map>
        <entry key="text" value="emailAutoIngest-text.ftl"/>
        <entry key="html" value="emailAutoIngest-html.ftl"/>
        <entry key="toEmailAddress" value="${ambra.platform.email.autoingest}"/>
        <entry key="subject" value="Auto Ingest Results "/>
      </map>
    </property>
    <property name="errorEmailMap">
      <map>
        <entry key="text" value="emailError-text.ftl"/>
        <entry key="html" value="emailError-html.ftl"/>
        <entry key="toEmailAddress" value="${ambra.platform.email.errors}"/>
        <entry key="subject" value="An ambra error has occured"/>
      </map>
    </property>
  </bean>

  <bean id="solrHttpService" class="org.ambraproject.service.search.SolrHttpServiceImpl">
    <property name="config" ref="ambraConfiguration"/>
    <property name="httpClient" ref="httpClient"/>
  </bean>

  <bean id="mostViewedArticleService" class="org.ambraproject.service.search.SolrMostViewedArticleService">
    <property name="solrFieldConverter" ref="solrFieldConverter"/>
    <property name="solrHttpService" ref="solrHttpService"/>
  </bean>


  <bean id="solrFieldConverter" class="org.ambraproject.service.search.SolrFieldConversionImpl">
    <property name="allTimeViewsField" value="counter_total_all"/>
    <property name="viewCountingFields">
      <map>
        <entry key="30" value="counter_total_month"/>
      </map>
    </property>
  </bean>

  <bean id="taxonomyService" class="org.ambraproject.service.taxonomy.TaxonomyServiceImpl">
    <property name="cache" ref="taxonomyCache" />
    <property name="searchService" ref="searchService" />
  </bean>

</beans>
